
\renewcommand{\rmdefault}{cmss}
\documentclass[11pt,a4paper]{article}

\usepackage{a4,german}
\usepackage[latin1]{inputenc}

\usepackage{multicol}
\usepackage{url}
\usepackage{color}
\usepackage{graphicx}

\usepackage{wrapfig}

\setlength{\oddsidemargin}{-6mm}
\setlength{\evensidemargin}{-6mm}
\setlength{\topmargin}{-15mm}
\setlength{\textwidth}{17cm}
\setlength{\textheight}{25cm}
\setlength{\parindent}{0cm}
\setlength{\parskip}{1.5ex}
\newlength{\embfigwidth}

\definecolor{MyLightGreen}{rgb}{0.51, 0.93, 0.57} %color: #84EF92
\definecolor{MyLightBlue}{rgb}{0.57, 0.88, 1.0} %color: $93E2FF
\setlength{\embfigwidth}{7.85cm}%{\linewidth minus1cm}

\renewcommand{\rmdefault}{cmss}

\newcommand{\hosection}[1]{\begin{center}{\large \textbf{#1}}\end{center}}
\newcommand{\hoitem}[1]{\emph{#1}:}
\newcommand{\hodeco}[1]{\begin{wrapfigure}[3]{l}{2cm}\
	 \vspace*{-0.87cm}\\ \includegraphics*[scale=0.56, angle=-90]{#1} \
	 \end{wrapfigure}}


\begin{document}

\pagestyle{empty}



% headline
\begin{flushright}
{ \Huge \textbf{ 
	System Development Environment} \vspace*{0.2cm}\\
  \Large \textbf{ 
	www.t2-project.org\hspace*{2cm}}
}
\end{flushright}
% we do the logo here and raise it to the height of the major headline
\vspace*{-2.8cm}\hspace*{-0.05cm}\includegraphics*[scale=0.213]{t2-logo.eps}


\begin{multicols}{2}

\hosection{More than a distribution}

\hodeco{deco-3.eps}
T2 is not just a common Linux distribution - it is a flexible
open source build kit for Linux based Systems supporting the creation
of custom distributions with bleeding edge technology. Whether embedded
systems with low memory footprint, secure and highly specialized
server setups or complete desktop systems featuring a rich set of
applications - the modular framework of T2 can easily be adapted to
fit your needs.

\hoitem{Philosophy} A community driven development process ensures
rapid evolution of the tool kit. Both free and professional users have
been attracted by the GPL'ed build system and created a large set of
extensions and packages for T2. Industrial spin-off projects benefit
from the steadily growing user base of the project by gaining access
to an enormous amount of resources and innovations.

\hoitem{Standard compliant} Packages are kept clean and distribution
specific patches are avoided.  Furthermore T2 adheres to the
Filesystem Hierarchy Standard (FHS) and Linux Standard Base
(LSB). Package configurations are kept simple with focus on
security. Inconsistencies and historical cruft is evaded by making as
few assumptions about the past as possible.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\hosection{The Build Kit}

\hodeco{deco-6.eps}
T2 features an automated build system which manages the whole
compilation process including an optional installer CD creation.
After initial creation of the build-toolchain, all packages are built
inside a sandbox environment to monitor installed files and
dependencies automatically. Optionally there can be a cross-build
beetween different architectures - use the best machines to compile
for a thin target architecture. The build system can also modify the execution of
various programs to provide a generic way to transform control compiler flags
and file manipulations.

\hoitem{Framework} The T2 framework allows for the creation of individual custom
build target definitions, including the package selection and C library
to be used and to customize their configuration. The build system
merges all those definitions together and generates a build
process. Dependencies of packages are traced and resolved during the
compilation process to disburden the user. There is full control of
the build output such as to create a installable CD or ROM images for
embedded use or distributing the compiled system over the network.

\hoitem{Portability} Due to the nature of the clean source packages and its
automatic build system, T2 is highly portable. It includes support for
ARM, Alpha, HPPA, HPPA64, ia64, MIPS, PowerPC, PowerPC64, SPARC, Ultra
SPARC, SuperH and x86, x86-64. The user can add definitions for other
architectures to the SDE if desired.


\hoitem{Optimization} Since the automatic build system controls the whole
build, it can transform compiler arguments used by the various
packages on-the-fly. This allows adapting the optimization for the
specified CPU platform, thus accelerating your product over its
current limits.

\hoitem{Packaging system} Unlike competing packaging systems like RPM or DEB,
the format used in T2 does not require the developer to write
code. Instead, an ASCII tag format is used to specify the package
parameters - the automated build system does the work.

\colorbox{MyLightBlue}{
\begin{minipage}{\embfigwidth}
\includegraphics*[scale=0.95, angle=-90]{t2-overview.eps}
{ \small \emph{ Choose your desired architecture and setup the build
mode to generate your favored system. Benefit from the huge set of
maintained targets and packages that are available within T2. After
the build, T2 can create a set of bootable CDs or generate a ROM-Image to distribute the
system.}}
\end{minipage}
}


\hoitem{Ready to start} T2 already ships with over 2100 up-to-date packages
providing a solid base for your product, including the X.Org windowing
system, major desktop environments like KDE, GNOME and many server
and security additions.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\hosection{Features}

\hodeco{deco-1.eps}
Due to its flexibility and scalability T2 is an interesting SDE for
embedded systems. But in many cases the goal of the user is just
creating a good custom Linux distribution - it is a T2 philosophy to
deliver vanilla packages and standard compliant installations.
Surely, an excellent distribution
needs more than kernel, libraries and software. T2 comes with many
features that make it an easy to maintain, highly configurable and
comfortable system.

\hoitem{Hardware auto-detection} The hardware detection system is
exclusively designed around the Linux hotplug mechanism. This way the
same code-path is used for devices present at boot-up or plugged into
the system at run time yielding exactly the same configuration
whenever the user decides to connect the devices.

\hoitem{Network configuration} For network configuration a modular
framework supporting: profiles, basic IP configuration, multiple interfaces,
stateful firewalling, W-LAN, PPP incl. analog modems, PPPoE (cable and DSL) as
well as CSD and GPRS for use with mobile phones.

\hoitem{Administration} T2 features an Install CD target with a full installer
supporting partitioning hard-drives, creating file-systems, defining
mount points, package selection and much more. The config tool STONE
allows administrators to configure system services, network and
behavior. STONE is compatible with the system's standard config files,
manual changes in those files are mostly preserved.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


\hosection{T2 - a good choice}


\hodeco{deco-10.eps}
T2 gives a good framework to build custom Linux based systems. Instead
of starting to build everything from scratch, one can benefit from all
the existing architectures and a full package repository. There are
even more advantages maintaining the product: A custom target's build
can be instantly reproduced and it is easy to perform slight
modifications and rebuild without having to do everything again
""manually"". When updating binary packages, there is a backup mode
for modified files, so no config file is accidentaly lost.
Together the support for different compilers and
interesting options like uclibc, T2 gives interesting perspectives
for the development of embedded systems.

\colorbox{MyLightGreen}{
\begin{minipage}{\embfigwidth}
\includegraphics*[scale=0.95, angle=-90]{t2-scaling.eps}
{ \small \emph{ T2 provides a common base for creation of various
systems on a wide set of target architectures with very different
requirements. The development environment scales for systems with low
memory footprints up to huge installations on servers or desktop computers.
}}
\end{minipage}
}

\hoitem{Quality Assurance} During T2 development, measurements are
used to assure the high quality level defined by the developers. The
sandbox environment is used to review the content installed by the
packages, as well as the preconditions needed to build the
package. In addition, a regression tester automatically verifies cross
builds for the supported architectures and tracks the build status for
every package included in T2. Since the system builds itself up in the
sandbox environment it is guaranteed to be stable to boot strap itself.

\hoitem{Why T2} With all the points outlined above, T2 offers
a solid base and a flexible framework for integration with your
custom applications. The state-of-the-art technology reduces the
development time and  the time to market.

Many end users and system administrators enjoy T2 with its
clean and tested packages for daily home or office use.

With developers around the world, T2 is best suited for commercial
scale products, especially in the embedded and high performance
clustering market.

\hosection{www.t2-project.org}
\end{multicols}

\end{document}
